#!/usr/bin/env perl
use strict;
use warnings;
use FindBin qw($RealBin);
use Mojolicious::Lite;
use File::Temp;
use IPC::Run 'run';

BEGIN {
    die "Env VOTOLEGAL_DCRTIME_DATA is not a dir.\n"        unless -d $ENV{VOTOLEGAL_DCRTIME_DATA};
    die "Env VOTOLEGAL_DCRTIME_DUMPDB is not executable.\n" unless -x $ENV{VOTOLEGAL_DCRTIME_DUMPDB};
    die "Directory $RealBin/data does not exists.\n"        unless -d "$RealBin/data";
};

plugin 'Config';
plugin 'RenderFile';

our $dumpfile;
my $lock = 0;
update_db();

Mojo::IOLoop->recurring(3600 => sub { updated_db() });

helper wait_for_lock => sub {
    my $c = shift;

    return if $lock == 0 && defined $dumpfile;
    my $w;
    $w = Mojo::IOLoop->recurring(0.25 => sub {
        my $loop = shift;
        $loop->remove($w) if $lock == 0 && defined $dumpfile;
    });
};

get '/dumpdb' => sub {
    my $c = shift;

    $c->wait_for_lock();

    return $c->render_file(filepath => $dumpfile, filename => 'dumpdb.txt');
};

sub update_db {
    return if $lock == 1;

    app->log->info("Updating merkle tree...");

    my $fh = File::Temp->new(UNLINK => 0);
    close $fh;

    app->log->debug("Copying data...");
    run ['rsync', '-avrz', $ENV{VOTOLEGAL_DCRTIME_DATA} . '/', "$RealBin/data"];

    app->log->debug("Running dcrtime_dumpdb...");
    run [ $ENV{VOTOLEGAL_DCRTIME_DUMPDB}, '-d', "$RealBin/data/mainnet" ], '>',  $fh->filename;

    $lock = 1;
    if (-e $dumpfile) {
        unlink $dumpfile or die $!;
    }
    $dumpfile = $fh->filename;
    $lock = 0;

    app->log->info("Merkle tree updated!");
};

app->start;

__DATA__
@@ not_found.html.ep
% layout 'default';
% title 'Page not found';
Page not found

@@ exception.html.ep
% layout 'default';
% title 'Internal server error';
Internal server error

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>