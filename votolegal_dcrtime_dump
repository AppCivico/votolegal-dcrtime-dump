#!/usr/bin/env perl
use strict;
use warnings;
use FindBin qw($RealBin);
use Mojolicious::Lite;
use AnyEvent;
use AnyEvent::Filesys::Notify;
use File::Copy::Recursive qw(dircopy);
use IPC::Run 'run';

BEGIN {
    die "Env VOTOLEGAL_DCRTIME_DATA is not a dir.\n"        unless -d $ENV{VOTOLEGAL_DCRTIME_DATA};
    die "Env VOTOLEGAL_DCRTIME_DUMPDB is not executable.\n" unless -x $ENV{VOTOLEGAL_DCRTIME_DUMPDB};
    die "Directory $RealBin/data does not exists.\n"        unless -d "$RealBin/data";
};

plugin 'Config';

my $lock = 0;
update_db();

helper wait_for_lock => sub {
    my $c = shift;

    $c->render_later;

    my $w;
    $w = AE::timer 0.25, 0, sub {
        undef $w if $lock == 0;
    };
};

AnyEvent::Filesys::Notify->new(
    dirs     => [ $ENV{VOTOLEGAL_DCRTIME_DATA} ],
    interval => 60 * 60, # 60 minutes.
    cb       => sub { update_db() },
);

get '/dumpdb' => sub {
    my $c = shift;

    $c->wait_for_lock();

    return $c->reply->file("$RealBin/dumpdb.txt");
};

sub update_db {
    return if $lock == 1;

    app->log->info("Updating merkle tree...");

    if (-e "$RealBin/dumpdb.txt") {
        app->log->debug("Delete $RealBin/dumpdb.txt");
        unlink "$RealBin/dumpdb.txt" or die $!;
    }

    app->log->debug("Updating merkle tree...");
    $lock = 1;

    app->log->debug("Copying data...");
    run ['rsync', '-avr', $ENV{VOTOLEGAL_DCRTIME_DATA} . '/', "$RealBin/data"];

    app->log->debug("Running dcrtime_dumpdb...");
    run [ $ENV{VOTOLEGAL_DCRTIME_DUMPDB}, '-d', "$RealBin/data/mainnet" ], '>',  "$RealBin/dumpdb.txt";

    app->log->info("Merkle tree updated!");

    $lock = 0;
};

app->start;

__DATA__
@@ not_found.html.ep
% layout 'default';
% title 'Page not found';
Page not found

@@ exception.html.ep
% layout 'default';
% title 'Internal server error';
Internal server error

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>